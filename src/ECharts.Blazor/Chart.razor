@implements IChartItemContainer
@implements IAsyncDisposable
@using System.Timers
@using Microsoft.JSInterop
@inherits ChartComponentBase
@inject IJSRuntime Js
<div id="@_id" style="@Style" class="@Class"></div>
<CascadingValue TValue="IChartItemContainer" Value="this">
    <CascadingValue TValue="IJSObjectReference" Value="_module">
        <CascadingValue TValue="string" Value="_id" Name="Id">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {
    private readonly string _id = Guid.NewGuid().ToString("N");
    private IJSObjectReference? _module;
    private Timer? _timer;
    private Title? _title;
    private Legend? _legend;
    private readonly List<ISeries> _series = new();
    private XAxis? _xAxis;
    private YAxis? _yAxis;
    private Tooltip? _tooltip;
    [Parameter] public string? Style { get; set; }

    [Parameter] public string? Class { get; set; }

    public void Add(IChartItem item)
    {
        switch (item)
        {
            case Title title:
                _title = title;
                break;
            case Legend legend:
                _legend = legend;
                break;
            case ISeries series:
                _series.Add(series);
                break;
            case XAxis xAxis:
                _xAxis = xAxis;
                break;
            case YAxis yAxis:
                _yAxis = yAxis;
                break;
            case Tooltip tooltip:
                _tooltip = tooltip;
                break;
        }
    }

    public void Remove(IChartItem item)
    {
        switch (item)
        {
            case Title title:
                _title = null;
                break;
            case Legend legend:
                _legend = null;
                break;
            case ISeries series:
                _series.Remove(series);
                break;
            case XAxis xAxis:
                _xAxis = null;
                break;
            case YAxis yAxis:
                _yAxis = null;
                break;
            case Tooltip tooltip:
                _tooltip = null;
                break;
        }
    }

    public override Dictionary<string, object?> SerializeSettings()
    {
        return new Dictionary<string, object?>
        {
            { "title", _title?.SerializeSettings() },
            { "legend", _legend?.SerializeSettings() },
            { "series", _series.Select(x => x.SerializeSettings()).ToArray() },
            { "xAxis", _xAxis?.SerializeSettings() },
            { "yAxis", _yAxis?.SerializeSettings() },
            { "tooltip", _tooltip?.SerializeSettings() }
        };
    }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>(
                "import", "./_content/ECharts.Blazor/echartsInterop.js");
            await _module.InvokeVoidAsync("init", _id, SerializeSettings());
            _timer = new Timer(300);
            _timer.Elapsed += TimerElapsed;
        }
    }

    private void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (sender is Timer timer)
        {
            timer.Stop();
            _module?.InvokeVoidAsync("setOption", _id, SerializeSettings());
        }
    }

    protected override void OnParametersSet()
    {
        // _timer?.Stop();
        // _timer?.Start();
    }

    public async ValueTask DisposeAsync()
    {
        _timer?.Dispose();
        if (_module != null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

}