@using System.Text.Json
@using System.Text.Json.Nodes
@using System.Text.Json.Serialization
@using Microsoft.JSInterop
@inherits ChartItemBase
<div id="@_id" style="display:none;">
    @if (_tooltipData != null && Template != null)
    {
        @Template(_tooltipData)
    }

</div>

@code {

    [Parameter] public bool Show { get; set; } = true;

    [Parameter] public RenderFragment<TooltipTemplateData[]>? Template { get; set; }

    private static readonly Dictionary<string, Tooltip> _tooltips = new();

    private readonly string _id = Guid.NewGuid().ToString("N");

    public override Dictionary<string, object?> SerializeSettings()
    {
        return new Dictionary<string, object?>
        {
            { "show", Show },
            { "trigger", "axis" },
            { "id", _id },
            { "hasFormatter", Template != null }
        };
    }

    protected override void OnInitialized()
    {
        _tooltips[_id] = this;
        base.OnInitialized();
    }

    public override async ValueTask DisposeAsync()
    {
        _tooltips.Remove(_id);
        await base.DisposeAsync();
    }

    [JSInvokable("ValueFormatter")]
    public static Task<string> ValueFormatterCallback(JsonObject data)
    {
        var id = data["id"].GetValue<string>();
        var tooltip = _tooltips[id];
        tooltip.SetTooltipData(data["params"]);
        return Task.FromResult(string.Empty);
    }

    private void SetTooltipData(JsonNode? data)
    {
        _tooltipData = data?.Deserialize<TooltipTemplateData[]>();
        StateHasChanged();
    }

    private TooltipTemplateData[]? _tooltipData;


    public class TooltipTemplateData
    {
        [JsonPropertyName("name")] public string? Name { get; set; }

        [JsonPropertyName("seriesName")] public string? SeriesName { get; set; }

        [JsonPropertyName("marker")] [JsonInclude]
        private string? _markerString;

        public MarkupString? Marker => new MarkupString(_markerString ?? string.Empty);

        [JsonPropertyName("color")] public string? Color { get; set; }

        [JsonPropertyName("data")] public JsonElement[]? Data { get; set; }

        [JsonPropertyName("value")] public JsonElement[]? Value { get; set; }
    }

}