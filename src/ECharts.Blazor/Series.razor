@inherits ChartItemBase
@implements ISeries
@typeparam T
@typeparam TValue

@code {
    protected virtual SeriesTypes Type { get; set; }

    [Parameter] public string? Name { get; set; }

    [Parameter] public SeriesColorBy ColorBy { get; set; }

    [Parameter] public IEnumerable<T>? Data { get; set; }

    [Parameter] public Func<T, TValue?>? ValueField { get; set; }

    [Parameter] public Func<T, object>? CategoryField { get; set; }

    [Parameter] public Func<TValue?, string>? ValueFormatter { get; set; }

    public override Dictionary<string, object?> SerializeSettings()
    {
        return new Dictionary<string, object?>
        {
            { "type", Type.ToString().ToLower() },
            { "name", Name },
            { "colorBy", ColorBy.ToString().ToLower() },
            { "data", GetData() }
        };
    }

    protected virtual object? GetData()
    {
        return Data?.Select(x =>
        {
            var category = CategoryField?.Invoke(x) ?? x;
            var value = ValueField == null ? default : ValueField.Invoke(x);
            var tooltip = ValueFormatter?.Invoke(value ?? default(TValue));
            return new[] { category, value };
        });
    }

}